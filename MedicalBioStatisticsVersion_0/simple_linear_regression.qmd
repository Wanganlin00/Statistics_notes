# 线性回归

线性模型用于解释一个连续因变量和一个或多个自变量之间的线性关系。模型形式一般为：

$$
Y=X\beta + \epsilon
$$

其中， Y 是因变量，X 是自变量矩阵，β 是回归系数，ϵ 是误差项。

一般线性模型中，其自变量全部为固定效应自变量，3点假设：

1.  正态性，因变量y服从正态分布。
2.  独立性，各例观测值Y~i~ 之间相互独立。
3.  方差齐性，Y方差相等或 残差e 服从N（0，σ^2^）

```{r}
library(tidymodels)
library(patchwork)
library(ggfortify)
```

[数据下载网站](https://www.statlearning.com/resources-second-edition)

```{r}
advertising<-read_csv("data/ISLR/Advertising.csv")
p_sales<-function(x){
  ggplot(advertising,aes({{x}},sales))+
           geom_point(shape=21,color="red")+
           geom_smooth(formula = 'y ~ x',method = "lm",se=FALSE)
}
p_sales(TV)|p_sales(radio)|p_sales(newspaper)
```

## 一元线性回归

linear regression model：

$$
Y_i=\beta_0+ \beta_1 X_i+\epsilon_i,其中\epsilon_i\sim N(0,\sigma^2)
$$

```{r}
#linear model specification 线性模型规范
lm_spec <-linear_reg() %>%
  set_mode("regression") %>%
  set_engine("lm")  
lm_spec
```

```{r}
lm_tv <- lm_spec %>%  fit(sales ~ TV, data = advertising)
# 模型摘要
lm_tv
summary(lm_tv$fit)

# 参数估计值、标准误、统计量、p值
broom::tidy(lm_tv)
# 模型统计信息
broom::glance(lm_tv) 
```

### 点须图

```{r}

# 整理回归模型结果
tidy_lm <- tidy(lm_tv, conf.int=T) %>% dplyr::filter(term !='(Intercept)' )
# 绘制点须图
ggplot(tidy_lm, aes(x = estimate, y = term)) +
  geom_point(size = 2, color = "black") + # 绘制点
  geom_errorbarh(aes(xmin = conf.low, 
                     xmax = conf.high), 
                 height = 0, color = "black") + # 绘制误差线
  geom_vline(xintercept = 0, colour = "grey50", linetype = 2) + # 绘制参考线
  labs(x = NULL, y = NULL) 

```

### 预测

```{r}
# 预测
stats::predict(lm_tv, new_data = advertising) %>% 
    head(n = 10)
predict(lm_tv, new_data = advertising, type = "conf_int") %>% 
    head(n = 10)



# 比较观测值与预测值
augment(lm_tv, new_data = advertising) %>%
    select(sales, .pred) %>%
    head(n = 10)
```

#### 最小二乘法

保证各实测点到回归直线的纵向距离的平方和最小，即使得残差平方和最小。

$$
Q=\sum (Y-\hat Y)^2
$$

```{r}
# 可视化
augment(lm_tv, new_data = advertising) %>%
    ggplot(aes(x = TV)) +
    geom_linerange(aes(ymin = sales, ymax = .pred)) +
    geom_point(aes(y = sales), color = "red") +
    geom_abline(
        intercept = coef(lm_tv$fit)[1],
        slope = coef(lm_tv$fit)[2],
        color = "blue",
        size = 1
    )
```

## 模型诊断

```{r}
autoplot(lm_tv, which = 1:6, ncol = 2, label.size = 3)
```

### 残差图

预测值与残差的关系

线性

```{r}
# 检查线性回归模型的残差是否与预测值无关，即残差的分布是否随机。
# 残差应该随机分布在0附近
tibble(
    `Fitted values`=fitted(lm_tv$fit),
    Residuals = residuals(lm_tv$fit)
) %>% ggplot(aes(x = `Fitted values` , y = Residuals)) +
  geom_point(pch=21) +
    geom_smooth(formula = "y~x",color="red",lwd=0.5)+
  geom_hline(yintercept = 0,lty=2) +
  labs(x = "Fitted Values", y = "Residuals")
```

### Q-Q图

标准化残差正态性

```{r}
tibble(
       StandardizedResiduals =rstandard(lm_tv$fit) ) %>% 
    ggplot(aes(sample=StandardizedResiduals)) +
    stat_qq(pch=21)+
    stat_qq_line(color="red",lty=2)+
    labs(x = "Theoretical Quantiles", y = "Standardized residuals")

```

### Scale-Location 图

检查同方差性，如果看到漏斗形（残差随着拟合值增大而增大），则可能存在异方差性问题。

标准化残差平方根图

检查残差的正态性，如果看到残差的分布围绕 0 随机散布，没有明显的模式，模型拟合是理想的。

```{r}
plot(lm_tv$fit, which = 3)
```

```{r}
# 绘制 Scale-Location 图
tibble(
    fitted_values=fitted(lm_tv$fit),
    StandardizedResiduals = rstudent(lm_tv$fit) ,
) %>%
    ggplot(aes(x = fitted_values, y = sqrt(abs(StandardizedResiduals)))) +
    geom_point(pch=21) +
    geom_smooth(color="red",lwd=0.5)+
    labs(title = "Scale-Location Plot",x = "Fitted Values", y = "√|Standardized residuals|")
```

### Cook's距离

```{r}
plot(lm_tv$fit,4)  
```

```{r}
threshold <- 4 / (nrow(advertising)-length(lm_tv$fit$coefficients)-2)
                  
                 
tibble(
    x = 1:nrow(advertising),
    cooks_distance = cooks.distance(lm_tv$fit),
    label = factor(if_else(cooks_distance>threshold,x,NA))
) %>% 
    ggplot() +
    geom_segment(aes(
        x = x,
        xend = x,
        y = 0,
        yend = cooks_distance ,
    )) +
    geom_text(aes(
        x = x,
        y =cooks_distance ,
        label =label,
    ), vjust = -0.2) +
    labs(x = "Observation Index", y = "Cook's Distance")
```

### 残差-杠杆值图

```{r}
plot(lm_tv$fit,5)  
```

hat 统计量

```{r}
tibble(
    x = 1:nrow(advertising),
    leverage = hatvalues(lm_tv$fit),
    StandardizedResiduals = rstandard(lm_tv$fit) ,
    cooks_distance = cooks.distance(lm_tv$fit),
    label = factor(if_else(cooks_distance>threshold,x,NA))
) %>%
    ggplot(aes(x = leverage, y = StandardizedResiduals)) +
    geom_point(pch=21) +
    geom_smooth(color="red",lwd=0.5)+
    scale_x_continuous(limits = c(0, NA)) +
    geom_vline(xintercept = 0, lty = 2) +
    geom_hline(yintercept = 0, lty = 2) +
    ggrepel::geom_text_repel(mapping = aes(label = label))+
    labs(x = "Leverage Values", y = "Standardized residuals")



```

### Cook‘s距离和杠杆值

```{r}
plot(lm_tv$fit,6)  
```
